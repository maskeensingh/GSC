import streamlit as st
import os
import logging
import json
import PyPDF2
from sentence_transformers import SentenceTransformer
from langchain_groq import ChatGroq
import faiss
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_core.prompts import ChatPromptTemplate
from dotenv import load_dotenv
import tiktoken
from geopy.geocoders import Nominatim
import googlemaps
from streamlit_folium import st_folium
import folium

# Set up logging
logging.basicConfig(level=logging.INFO)

# Load environment variables
load_dotenv()
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
GOOGLE_PLACES_API_KEY = os.getenv("GOOGLE_PLACES_API_KEY")

# Validate API Keys
if not GROQ_API_KEY or not GOOGLE_PLACES_API_KEY:
    raise ValueError("API keys for Groq and/or Google Places are missing. Check your environment variables.")

# Initialize APIs
llm = ChatGroq(groq_api_key=GROQ_API_KEY, model_name="llama3-8b-8192")
gmaps = googlemaps.Client(key=GOOGLE_PLACES_API_KEY)

# Helper Functions
def count_tokens(text):
    enc = tiktoken.get_encoding("cl100k_base")
    return len(enc.encode(text))

def extract_text_from_pdfs(pdf_paths):
    text = ""
    for pdf_path in pdf_paths:
        try:
            with open(pdf_path, 'rb') as file:
                reader = PyPDF2.PdfReader(file)
                text += " ".join([page.extract_text() for page in reader.pages if page.extract_text()])
        except Exception as e:
            logging.error(f"Error reading {pdf_path}: {e}")
    return text

def clean_pdf_text(text):
    filtered_lines = [
        line.strip() for line in text.split("\n") 
        if not any(keyword in line for keyword in ["ACKNOWLEDGEMENT", "PREFACE", "Table", "exam"])
    ]
    return " ".join(filtered_lines)

def generate_embeddings(text):
    model = SentenceTransformer('all-MiniLM-L6-v2')
    chunks = split_text_into_chunks(text)
    embeddings = model.encode(chunks)
    return chunks, embeddings

def create_faiss_index(embeddings):
    if embeddings.size == 0:
        logging.error("No embeddings provided to create FAISS index.")
        return None
    dim = embeddings.shape[1]
    index = faiss.IndexFlatL2(dim)
    index.add(embeddings)
    return index

def split_text_into_chunks(text, chunk_size=1000, chunk_overlap=200):
    splitter = RecursiveCharacterTextSplitter(chunk_size=chunk_size, chunk_overlap=chunk_overlap)
    return splitter.split_text(text)

def get_top_chunks(query, index, pdf_chunks, top_k=5):
    model = SentenceTransformer('all-MiniLM-L6-v2')
    query_embedding = model.encode([query])
    D, I = index.search(query_embedding, k=top_k)
    return [pdf_chunks[i] for i in I[0]] if len(I[0]) > 0 else []

def fetch_nearby_places(place_type, user_coordinates, radius=2000):
    try:
        results = gmaps.places_nearby(location=user_coordinates, radius=radius, type=place_type).get("results", [])
        
        # Filter results based on keywords for skin specialists
        if place_type == "skin specialist":
            keywords = ["dermatologist", "skin", "clinic","hospital"]
            results = [
                place for place in results
                if any(keyword.lower() in place.get("name", "").lower() for keyword in keywords)
            ]
        
        return [
            {
                "name": place.get("name", "Unknown"),
                "address": place.get("vicinity", "Address not available"),
                "rating": place.get("rating", "No rating available"),
                "location": (
                    place.get("geometry", {}).get("location", {}).get("lat"),
                    place.get("geometry", {}).get("location", {}).get("lng")
                ),
            }
            for place in results
        ][:5]
    except Exception as e:
        logging.error(f"Google Places API Error: {e}")
        return []

def display_map(places, user_coordinates):
    m = folium.Map(location=user_coordinates, zoom_start=15)
    folium.Marker(
        location=user_coordinates, popup="Your Location", icon=folium.Icon(color="blue")
    ).add_to(m)
    for place in places:
        folium.Marker(
            location=place["location"],
            popup=f"{place['name']} - {place.get('rating', 'No rating')}\u2b50",
            icon=folium.Icon(color="green")
        ).add_to(m)
    st_folium(m, width=700, height=500)

def build_dynamic_prompt(context, disease_name, severity):
    # Define the prompt template with dynamic placeholders
    prompt = ChatPromptTemplate.from_template(
        """
        You are a medical expert.
        Disease: {disease_name}
        Severity: {severity}
        1. If disease is severe, Clearly explain why the condition is severe and emphasize the urgency of visiting a doctor or specialist.Provide immediate actions or precautions to minimize worsening.
        2. If severity is moderate, Suggest affordable over-the-counter medications (ointments, creams, or tablets and others) available at most pharmacies.Recommend simple and cost-effective home remedies for relief.
        3. List common and affordable home remedies that are effective.Recommend low-cost, easily accessible medicines, if necessary.Provide preventive measures to stop the condition from worsening.
        For each case, also add other necessary actions, dos, and don'ts, medications from pharmacy etc to help the patient recover quickly.
        The goal is to empower people, especially those with limited resources, to take the right actions for their skin health, reduce unnecessary expenses, and seek medical care only when necessary.
        Make sure to use context below.
        Context: {context}
        
        Provide answer in the following JSON format:
        ```json
        {{
            "severity": "<Severity Level>",
            "answer": "<Detailed Answer>"
        }}
        ```
        Ensure that the JSON is well-formed and adheres to this structure. Do not include additional text, explanations, or unrelated output. Only output the JSON object within the delimiters.

        Example output:
        ```json
        {{
            "severity": "moderate",
            "answer": "Severe eczema can lead to significant discomfort, sleep disturbance, and impact daily activities. It is essential to seek medical attention from a dermatologist or healthcare provider to develop a personalized treatment plan. In the meantime, take immediate actions to minimize worsening:\n\n1. Apply a topical corticosteroid or immunomodulator cream to reduce inflammation and itching.\n2. Use cool compresses or wet wraps to reduce itching and inflammation.\n3. Avoid scratching, which can lead to further irritation and infection.\n4. Keep the affected area moist with a topical emollient or ointment.\n5. Avoid using harsh soaps, detergents, or fragrances, which can exacerbate eczema.\n\nCommon and affordable home remedies that can provide relief include:\n\n1. Oatmeal baths: Oatmeal has anti-inflammatory and soothing properties that can help reduce itching and irritation.\n2. Coconut oil: Coconut oil has anti-inflammatory and moisturizing properties that can help soothe and calm the skin.\n3. Aloe vera gel: Aloe vera has anti-inflammatory and soothing properties that can help reduce itching and irritation.\n4. Tea tree oil: Tea tree oil has antibacterial and anti-inflammatory properties that can help reduce inflammation and prevent infection.\n\nPreventive measures to stop the condition from worsening include:\n\n1. Identifying and avoiding triggers, such as allergens, irritants, or stressors.\n2. Keeping the skin moisturized with a gentle, fragrance-free moisturizer.\n3. Using gentle, fragrance-free cleansers and avoiding harsh soaps or detergents.\n4. Avoiding extreme temperatures, humidity, or weather changes.\n5. Practicing good hygiene, such as washing hands frequently and avoiding close contact with others who may be sick.\n\nMedications from pharmacies that can be used to treat eczema include:\n\n1. Topical corticosteroids: Hydrocortisone cream or ointment can help reduce inflammation and itching.\n2. Topical immunomodulators: Pimecrolimus cream or ointment can help reduce inflammation and itching.\n3. Oral antihistamines: Diphenhydramine tablets or syrup can help relieve itching and reduce the risk of scratching and infection.\n4. Oral corticosteroids: Prednisone tablets or syrup can help reduce inflammation and itching, but should only be used under the guidance of a healthcare provider.\n\n"
        }}
        ```
        """
    )

    # Format the prompt with the provided context, disease name, and severity
    formatted_prompt = prompt.format_prompt(context=context, disease_name=disease_name, severity=severity).to_string()

    return formatted_prompt

# Streamlit Interface
st.title("SkinGenie - Disease Remedy Finder")
st.markdown("🧬 Enter a skin disease and get remedies, nearby pharmacies, or dermatologists based on severity.")

# Inputs
disease_name = st.text_input("Enter the disease name (e.g., eczema, psoriasis):").strip()
location_input = st.text_input("Enter your location (e.g., 'New Delhi, India'):").strip()

if disease_name:
    try:
        # PDF Data
        pdf_paths = ["remedies1.pdf", "remedies2.pdf"]
        pdf_text = clean_pdf_text(extract_text_from_pdfs(pdf_paths))
        pdf_chunks, pdf_embeddings = generate_embeddings(pdf_text)
        pdf_index = create_faiss_index(pdf_embeddings)

        # Query PDF
        context = " ".join(get_top_chunks(disease_name, pdf_index, pdf_chunks))

        # Severity Assessment
        severity_prompt = f"""
        Classify the disease {disease_name} in terms of its effects as one of the following: mild, moderate, or severe. 
        Only return one string as output: "mild", "moderate", or "severe". 
        Do not provide any explanations or additional text.
        """
        try:
            severity = llm.invoke(severity_prompt).content.strip().lower()
            logging.info(f"Severity returned: {severity}")

            if severity not in ["mild", "moderate", "severe"]:
                raise ValueError(f"Invalid severity level returned: {severity}")
        except Exception as e:
            logging.error(f"Error during severity assessment: {e}")
            st.error("An error occurred while assessing severity. Please try again.")
            severity = None

        # Remedies Generation
        if severity:
            prompt = build_dynamic_prompt(context, disease_name, severity)
            response = llm.invoke(prompt)
            logging.info(f"Model response: {response.content}")  # Log the raw response

            # Attempt to parse the JSON from the model's response
            try:
                # Extract content between "```json" and "```" if delimiters are used
                if "```json" in response.content:
                    json_str = response.content.split("```json")[1].strip().rstrip("```").strip()
                elif response.content.strip().startswith("{") and response.content.strip().endswith("}"):
                    json_str = response.content.strip()
                else:
                    raise ValueError("Invalid JSON format in response.")
                remedies = json.loads(json_str)
            except Exception as e:
                logging.error(f"Error parsing JSON from response: {e}")
                st.error("An error occurred while parsing the recommendation. Please try again.")
                remedies = None

            # Display Remedies
            if remedies:
                st.subheader("Answer:")
                st.json(remedies)
            else:
                st.warning("No recommendations available at this time.")

        # Nearby Locations
        if location_input:
            geolocator = Nominatim(user_agent="skingenie")
            user_location = geolocator.geocode(location_input)
            if user_location:
                user_coordinates = (user_location.latitude, user_location.longitude)
                nearby_places_pharmacy = fetch_nearby_places("pharmacy", user_coordinates)
                nearby_places_skin_specialist = fetch_nearby_places("skin specialist", user_coordinates)
                
                if nearby_places_pharmacy:
                    st.subheader("Nearby Pharmacies:")
                    for place in nearby_places_pharmacy:
                        st.write(f"**{place['name']}** - {place['address']} ({place['rating']}⭐)")
                
                if nearby_places_skin_specialist:
                    st.subheader("Nearby Skin Specialists:")
                    for place in nearby_places_skin_specialist:
                        st.write(f"**{place['name']}** - {place['address']} ({place['rating']}⭐)")
                
                if nearby_places_pharmacy or nearby_places_skin_specialist:
                    display_map(nearby_places_pharmacy + nearby_places_skin_specialist, user_coordinates)
                else:
                    st.warning("No nearby locations found.")
            else:
                st.error("Invalid location.")
    except Exception as e:
        logging.error(f"Error: {e}")
        st.error("An error occurred. Please try again.")